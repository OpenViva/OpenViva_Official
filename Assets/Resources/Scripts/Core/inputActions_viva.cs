//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/Scripts/Core/inputActions_viva.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Scripts/Core/inputActions_viva.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @InputActions_viva: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @InputActions_viva()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""inputActions_viva"",
    ""maps"": [
        {
            ""name"": ""Keyboard"",
            ""id"": ""eb459591-4014-468b-8cee-68a48cd78f73"",
            ""actions"": [
                {
                    ""name"": ""miniprofiler"",
                    ""type"": ""Button"",
                    ""id"": ""d839296e-6485-4f85-8646-6abe0065a4f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""81f0c277-c2b6-4fe2-87f6-cf24b562bb6e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""extendRight"",
                    ""type"": ""Button"",
                    ""id"": ""07bd9f8e-cd08-42d8-b2df-aa2716310bd8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""extendLeft"",
                    ""type"": ""Button"",
                    ""id"": ""440233d2-e56e-463d-99be-8e23bba0a3b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""wave"",
                    ""type"": ""Button"",
                    ""id"": ""dad4c442-1e0e-4c8f-b06e-4392ddd7e04f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""follow"",
                    ""type"": ""Button"",
                    ""id"": ""a6f37fa6-b8c2-4b6d-97a5-520d20239f53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""stop"",
                    ""type"": ""Button"",
                    ""id"": ""c219a71f-9664-48f7-85c4-cdd667ddffa4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""pauseButton"",
                    ""type"": ""Button"",
                    ""id"": ""129a5773-95ca-458a-9933-461d91e93a65"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""keyboardAlt"",
                    ""type"": ""Button"",
                    ""id"": ""8d9a8e1c-0186-4840-b785-4b1d45c9be46"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""rightInteract"",
                    ""type"": ""Button"",
                    ""id"": ""1d6323e7-1a6f-448f-88f0-d726d9b06948"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""leftInteract"",
                    ""type"": ""Button"",
                    ""id"": ""cb20c011-5e2b-4e0d-a1e5-5b507c8a76e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""crouch"",
                    ""type"": ""Button"",
                    ""id"": ""5594723d-bfd5-4c74-a507-bd20037de005"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""w"",
                    ""type"": ""Button"",
                    ""id"": ""154b3263-5503-4ad5-97ae-a1d670f64399"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""a"",
                    ""type"": ""Button"",
                    ""id"": ""79877d24-6410-4e62-b9cd-ce217371c73e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""s"",
                    ""type"": ""Button"",
                    ""id"": ""371d95be-9bf4-49cc-9133-331acd5884e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""d"",
                    ""type"": ""Button"",
                    ""id"": ""291b99e9-23cf-4f74-9f87-7c92343cf01a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""mouseVelocity"",
                    ""type"": ""PassThrough"",
                    ""id"": ""70ff0b6d-6ace-4e55-b487-f3e0b0191bf0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""mousePosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3d146d6f-665b-40e8-8ccd-8d034a0d6fc1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""handScrolling"",
                    ""type"": ""Value"",
                    ""id"": ""86e8c453-635b-4596-9021-35838dc22cb4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""795be110-47fe-4754-892c-77c0cdf291ac"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1b82e536-12ab-48ee-9d14-8553f20eade4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""562bda70-779d-4fd6-9125-6fbf2a7ccec3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3a150b00-cbf9-47a4-95fb-4b0538168722"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d2ca818c-1d03-45bc-8e68-d076636f621a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0a46f3dc-d408-4419-b78a-a3bbf9a5679f"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""extendLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ed4bc1b-fa83-438e-9b6e-8c0523d566f4"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""wave"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6033d847-c899-4be4-9717-fa730ac4dd02"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""follow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c009b2a-ed3a-4557-a526-c793a9e560ea"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""extendRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49dc878c-6bae-4e2d-8fc6-22b4f35ceab3"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pauseButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb808b91-5e22-4e2a-b902-787b6f387fd3"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""keyboardAlt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f7e14871-e7cc-4eb1-af46-c4f5098b0412"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rightInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b54c15f6-4427-41ba-bed0-7399e2e6bad6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""leftInteract"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0aec2d5-106c-41e3-8b59-5b507f244731"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab4cabfa-f357-46da-b82e-d7ed7b1f78de"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""w"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a0330cb-a74d-4d76-854e-16c11c3efa10"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""s"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7a1e39c-774f-4e86-8537-87c0f69f04ad"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""d"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""27b5204e-f398-4f43-bd6b-ff90bdfd3f89"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""a"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef68b29c-2d40-44dc-a29e-cddb6d33b711"",
                    ""path"": ""<Keyboard>/f8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""miniprofiler"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b440626d-745e-4dda-b62b-1d21d12d5726"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mouseVelocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d79b1129-14b8-45ea-bc55-c1e7e166e889"",
                    ""path"": ""<Touchscreen>/touch*/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""acb722ac-ff59-4c7f-9a65-ea04e5958012"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a79efb54-ee2c-4720-bee8-691b2041284a"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2024f90f-416e-44c3-b02d-ba0c29ee76cf"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""stop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8678a7c4-3a2f-4a39-aa58-dda8271f4c43"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""handScrolling"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""0b805ca3-4d00-4897-8471-e4675f34fffb"",
            ""actions"": [
                {
                    ""name"": ""mousePosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2a6ccb94-f4f7-4300-934f-d61c3bdbc7d0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""leftClick"",
                    ""type"": ""Button"",
                    ""id"": ""7fb3e74a-e0c2-4e17-9b5e-9b9690892aed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""rightClick"",
                    ""type"": ""Button"",
                    ""id"": ""e74b5760-c640-4796-9933-5e739464e4e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""middleClick"",
                    ""type"": ""Button"",
                    ""id"": ""89d71106-ea9c-4f3f-ab50-4861ce6c9fca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""scroll"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2ce7f96a-e191-4cc5-ae66-c10326a779e2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""cancel"",
                    ""type"": ""Button"",
                    ""id"": ""5e36d5d7-6792-4962-9f20-9541c1968ed7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""submit"",
                    ""type"": ""Button"",
                    ""id"": ""a25734d5-b423-4e9d-a063-793548aa3bc7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""66595166-4dbd-48c1-a0d9-1bcb2ea331c2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""trackedPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""181c19d7-6357-46c1-9544-0ae35f590e56"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""trackedOrientation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1ab2226a-514c-43b9-a820-076093290b36"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0cadca45-767e-4dc5-b397-82f3b5c0479c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""leftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""242cd397-6550-41ba-b261-066230e29a67"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""rightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62c95606-46a5-4f9c-9968-08a1b55d286f"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""middleClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e3d4283-c198-4cb6-9b8a-0accc4388a86"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11b3d4db-428f-4ef5-9350-7e5307bc4d51"",
                    ""path"": ""*/{Cancel}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""757f9a52-bab5-41b0-aee2-c6c5e7be22f0"",
                    ""path"": ""*/{Submit}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""162894b7-2b93-4bbc-aac5-48da0f5d244d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9daf3cd3-bc7e-425a-b8e1-d589be4c1aeb"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d2413274-2109-4c3e-b8d0-381361b91ae3"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c1c2b710-1b29-45cb-8a49-f6c9948e68b4"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5c821559-9c0b-40a9-a534-d989b655b92f"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8b3577c4-4f05-4342-be88-31264a9af669"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f99a8120-6410-40a0-8f59-17dfea05e81c"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""372c9cce-7f5a-42fe-8135-3a1586d0c75b"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""912736ff-1114-4a5c-a936-ea52b3bfffff"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c8b3a76f-5889-4164-8ea5-05f4cd11a1ef"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Joystick"",
                    ""id"": ""ff5bc04f-11ab-422b-be83-748cf8221965"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""83ccecb4-2074-4a21-80aa-8f35739a46e3"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f48fa767-0880-4a27-a6bd-59781e375f02"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4b6aec16-aa61-4f40-b377-b7e754695d27"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a1da3c79-0c74-4bc6-95b3-9f1e97a53921"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""ae83f5b8-3cb2-473f-a052-554e12be8c55"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1e3f5a9e-db40-4b95-89db-776778a7fac9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0ea71339-52cf-444a-a859-26b0d4cf7a78"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2f18c953-3285-4381-9d95-952780a0887e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""425a3d3d-0f2a-40e3-be97-94fbcb8ce78a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b4e77997-72ad-471a-b25d-ec73b1c38d2a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b0f5badc-3e99-472b-9af8-00d6915e2499"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""74025eca-30fe-46a1-b9f8-e9f5f63f3026"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5e8c7508-aca8-41dd-b847-d8d9e8d54391"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""62eb4794-4200-44a7-a613-2f62f8cadc9c"",
                    ""path"": ""<Touchscreen>/touch*/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a0247c2-1059-407c-8ff4-67891751006d"",
                    ""path"": ""<Pen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc872dd2-cbec-4649-9c0e-f14c4617e7e0"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""mousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6023bcdc-2031-43c1-b011-bdf8ade4280f"",
                    ""path"": ""<XRController>{RightHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""trackedPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ded08d25-31e7-48d3-bea0-092600ff3228"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""trackedPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81498c16-e210-4978-bbe6-f55c8fa4cead"",
                    ""path"": ""<XRController>{RightHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""trackedOrientation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""78821cf3-9a92-4e0d-8f70-663b1d312a4e"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""trackedOrientation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""VR Head"",
            ""id"": ""69ab58fa-272d-4ce6-a9d4-c243b222c671"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""24bcfad3-53f4-4360-b2b5-79ba7bb964d8"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""bd3f4fe9-47cb-4a45-9577-ad5ab43d6e62"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b23b46e2-f8fa-46af-a9b8-d2e7a9710040"",
                    ""path"": ""<XRHMD>/centerEyePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6081415-6cab-468f-b94c-181cf938746d"",
                    ""path"": ""<XRHMD>/centerEyeRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""VR LeftHand"",
            ""id"": ""fa62b563-0233-4b28-a9f3-6855cee5f00b"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""b19cd505-84c3-4f56-bb15-8c20c12720e5"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""50bd0f97-0681-476d-b905-5848337aadcf"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""095864f2-f950-4d85-89cf-333a0fd66d74"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Haptic Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""eda8d354-ce57-488f-8f12-18b68c8476e6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""54650ae9-1e7c-404b-8f0d-6c9cffe1b6fd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""d5f797c4-47df-4581-a819-bcaa3f1a78eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grab"",
                    ""type"": ""Value"",
                    ""id"": ""291fb1bb-31d3-41e2-8cb7-e8e539a59f75"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""ddc19e3f-2853-400f-812c-46db3774d9d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""00ad63b0-b724-4823-90cc-768ca0fe0ee8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""396acc53-639b-4f3c-90fa-5a040c4a133d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""712a4253-1899-41d6-96cc-1cfe96a56253"",
                    ""path"": ""<XRController>{LeftHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c34bc5d-8ae3-49f7-8fcc-7d1451eca6ab"",
                    ""path"": ""<XRController>{LeftHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42d84815-3791-4cc7-851f-17dbbd57b252"",
                    ""path"": ""<XRController>{LeftHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Haptic Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""160b5582-8582-4a23-9448-0b8825a2d702"",
                    ""path"": ""<XRController>{LeftHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3c47594-3f06-45bb-b05e-0dd4e7ad1a55"",
                    ""path"": ""<XRController>{LeftHand}/primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87321caf-21aa-49aa-8b42-28d8b33d4fe8"",
                    ""path"": ""<XRController>{LeftHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57af9df8-ba40-426f-8efa-4d7c4929ceed"",
                    ""path"": ""<XRController>{LeftHand}/thumbstickClicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""932153d9-aa83-4c23-9c4e-5d84985c6866"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d10e54fc-599b-4077-9180-7d837ccd64ee"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97091380-1a1d-486b-8064-4d2782bf8e82"",
                    ""path"": ""<XRController>{LeftHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab04f5ec-3810-4d5a-8a6e-cd7a7d7c756f"",
                    ""path"": ""<XRController>{LeftHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98c6706b-725d-42cf-a678-0f1ef705fb1d"",
                    ""path"": ""<XRController>{LeftHand}/thumbstickClicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""VR RightHand"",
            ""id"": ""323774f6-5cf8-4eac-b974-11d66f32775e"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""7472329b-583a-4a87-823e-3b0dfba268fc"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""12b97adf-4d75-4e41-b19d-0ac2103094cb"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tracking State"",
                    ""type"": ""Value"",
                    ""id"": ""4294d283-eef9-4138-92b8-3d13eec20033"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Haptic Device"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e9d83227-6c13-4cd2-8793-b35128dbf653"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""af03a2d5-d425-48d0-aae1-66b02c5962a9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""896cbec2-f65a-4095-99f1-b30dfdb4d7cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grab"",
                    ""type"": ""Value"",
                    ""id"": ""d1d27fad-5515-4612-98e3-8b812917db2d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""6c76cda0-5866-4dff-9160-503a6ef27cb6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""e671392c-a8d8-4152-8700-5837789c435d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""e48acce2-7232-486c-935f-5f4992e878a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""135a6fef-7f76-40eb-834c-f4536455aa1c"",
                    ""path"": ""<XRController>{RightHand}/*"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Haptic Device"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8dce0ce5-ad7a-4af9-898f-9b18b63a3d4b"",
                    ""path"": ""<XRController>{RightHand}/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic XR Controller"",
                    ""action"": ""Tracking State"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""abd6f3a8-d2fa-47a8-820a-9b2af870871f"",
                    ""path"": ""<XRController>{RightHand}/primary2DAxis"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de2cabb8-b8d4-4ad2-908c-ffea46545d62"",
                    ""path"": ""<XRController>{RightHand}/thumbstickClicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e3273d2-d9d1-4415-8dbb-19fd05b2971e"",
                    ""path"": ""<XRController>{RightHand}/grip"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94f2e17d-c3e1-42cf-988b-c8931cf4dcbd"",
                    ""path"": ""<XRController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71d6699c-0f48-4df6-be79-1cb65bdd70b3"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20627148-d2bb-43bc-8c91-fb9c77038d10"",
                    ""path"": ""<XRController>{RightHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ece0b57-6e8b-4f0b-bf08-251dfb32ba41"",
                    ""path"": ""<XRController>{RightHand}/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13f4e504-2c34-4adb-91b9-1bc0022f9e9f"",
                    ""path"": ""<XRController>{RightHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""096c5bfa-6965-49bf-a8d6-53cf253e774b"",
                    ""path"": ""<XRController>{RightHand}/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c5b1526-b79a-4abc-8473-a8433a009780"",
                    ""path"": ""<XRController>{RightHand}/thumbstickClicked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Keyboard
        m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
        m_Keyboard_miniprofiler = m_Keyboard.FindAction("miniprofiler", throwIfNotFound: true);
        m_Keyboard_movement = m_Keyboard.FindAction("movement", throwIfNotFound: true);
        m_Keyboard_extendRight = m_Keyboard.FindAction("extendRight", throwIfNotFound: true);
        m_Keyboard_extendLeft = m_Keyboard.FindAction("extendLeft", throwIfNotFound: true);
        m_Keyboard_wave = m_Keyboard.FindAction("wave", throwIfNotFound: true);
        m_Keyboard_follow = m_Keyboard.FindAction("follow", throwIfNotFound: true);
        m_Keyboard_stop = m_Keyboard.FindAction("stop", throwIfNotFound: true);
        m_Keyboard_pauseButton = m_Keyboard.FindAction("pauseButton", throwIfNotFound: true);
        m_Keyboard_keyboardAlt = m_Keyboard.FindAction("keyboardAlt", throwIfNotFound: true);
        m_Keyboard_rightInteract = m_Keyboard.FindAction("rightInteract", throwIfNotFound: true);
        m_Keyboard_leftInteract = m_Keyboard.FindAction("leftInteract", throwIfNotFound: true);
        m_Keyboard_crouch = m_Keyboard.FindAction("crouch", throwIfNotFound: true);
        m_Keyboard_w = m_Keyboard.FindAction("w", throwIfNotFound: true);
        m_Keyboard_a = m_Keyboard.FindAction("a", throwIfNotFound: true);
        m_Keyboard_s = m_Keyboard.FindAction("s", throwIfNotFound: true);
        m_Keyboard_d = m_Keyboard.FindAction("d", throwIfNotFound: true);
        m_Keyboard_mouseVelocity = m_Keyboard.FindAction("mouseVelocity", throwIfNotFound: true);
        m_Keyboard_mousePosition = m_Keyboard.FindAction("mousePosition", throwIfNotFound: true);
        m_Keyboard_handScrolling = m_Keyboard.FindAction("handScrolling", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_mousePosition = m_UI.FindAction("mousePosition", throwIfNotFound: true);
        m_UI_leftClick = m_UI.FindAction("leftClick", throwIfNotFound: true);
        m_UI_rightClick = m_UI.FindAction("rightClick", throwIfNotFound: true);
        m_UI_middleClick = m_UI.FindAction("middleClick", throwIfNotFound: true);
        m_UI_scroll = m_UI.FindAction("scroll", throwIfNotFound: true);
        m_UI_cancel = m_UI.FindAction("cancel", throwIfNotFound: true);
        m_UI_submit = m_UI.FindAction("submit", throwIfNotFound: true);
        m_UI_move = m_UI.FindAction("move", throwIfNotFound: true);
        m_UI_trackedPosition = m_UI.FindAction("trackedPosition", throwIfNotFound: true);
        m_UI_trackedOrientation = m_UI.FindAction("trackedOrientation", throwIfNotFound: true);
        // VR Head
        m_VRHead = asset.FindActionMap("VR Head", throwIfNotFound: true);
        m_VRHead_Position = m_VRHead.FindAction("Position", throwIfNotFound: true);
        m_VRHead_Rotation = m_VRHead.FindAction("Rotation", throwIfNotFound: true);
        // VR LeftHand
        m_VRLeftHand = asset.FindActionMap("VR LeftHand", throwIfNotFound: true);
        m_VRLeftHand_Position = m_VRLeftHand.FindAction("Position", throwIfNotFound: true);
        m_VRLeftHand_Rotation = m_VRLeftHand.FindAction("Rotation", throwIfNotFound: true);
        m_VRLeftHand_TrackingState = m_VRLeftHand.FindAction("Tracking State", throwIfNotFound: true);
        m_VRLeftHand_HapticDevice = m_VRLeftHand.FindAction("Haptic Device", throwIfNotFound: true);
        m_VRLeftHand_Move = m_VRLeftHand.FindAction("Move", throwIfNotFound: true);
        m_VRLeftHand_Select = m_VRLeftHand.FindAction("Select", throwIfNotFound: true);
        m_VRLeftHand_Grab = m_VRLeftHand.FindAction("Grab", throwIfNotFound: true);
        m_VRLeftHand_Interact = m_VRLeftHand.FindAction("Interact", throwIfNotFound: true);
        m_VRLeftHand_Pause = m_VRLeftHand.FindAction("Pause", throwIfNotFound: true);
        m_VRLeftHand_Run = m_VRLeftHand.FindAction("Run", throwIfNotFound: true);
        // VR RightHand
        m_VRRightHand = asset.FindActionMap("VR RightHand", throwIfNotFound: true);
        m_VRRightHand_Position = m_VRRightHand.FindAction("Position", throwIfNotFound: true);
        m_VRRightHand_Rotation = m_VRRightHand.FindAction("Rotation", throwIfNotFound: true);
        m_VRRightHand_TrackingState = m_VRRightHand.FindAction("Tracking State", throwIfNotFound: true);
        m_VRRightHand_HapticDevice = m_VRRightHand.FindAction("Haptic Device", throwIfNotFound: true);
        m_VRRightHand_Move = m_VRRightHand.FindAction("Move", throwIfNotFound: true);
        m_VRRightHand_Select = m_VRRightHand.FindAction("Select", throwIfNotFound: true);
        m_VRRightHand_Grab = m_VRRightHand.FindAction("Grab", throwIfNotFound: true);
        m_VRRightHand_Interact = m_VRRightHand.FindAction("Interact", throwIfNotFound: true);
        m_VRRightHand_Pause = m_VRRightHand.FindAction("Pause", throwIfNotFound: true);
        m_VRRightHand_Run = m_VRRightHand.FindAction("Run", throwIfNotFound: true);
    }

    ~@InputActions_viva()
    {
        UnityEngine.Debug.Assert(!m_Keyboard.enabled, "This will cause a leak and performance issues, InputActions_viva.Keyboard.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UI.enabled, "This will cause a leak and performance issues, InputActions_viva.UI.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_VRHead.enabled, "This will cause a leak and performance issues, InputActions_viva.VRHead.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_VRLeftHand.enabled, "This will cause a leak and performance issues, InputActions_viva.VRLeftHand.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_VRRightHand.enabled, "This will cause a leak and performance issues, InputActions_viva.VRRightHand.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keyboard
    private readonly InputActionMap m_Keyboard;
    private List<IKeyboardActions> m_KeyboardActionsCallbackInterfaces = new List<IKeyboardActions>();
    private readonly InputAction m_Keyboard_miniprofiler;
    private readonly InputAction m_Keyboard_movement;
    private readonly InputAction m_Keyboard_extendRight;
    private readonly InputAction m_Keyboard_extendLeft;
    private readonly InputAction m_Keyboard_wave;
    private readonly InputAction m_Keyboard_follow;
    private readonly InputAction m_Keyboard_stop;
    private readonly InputAction m_Keyboard_pauseButton;
    private readonly InputAction m_Keyboard_keyboardAlt;
    private readonly InputAction m_Keyboard_rightInteract;
    private readonly InputAction m_Keyboard_leftInteract;
    private readonly InputAction m_Keyboard_crouch;
    private readonly InputAction m_Keyboard_w;
    private readonly InputAction m_Keyboard_a;
    private readonly InputAction m_Keyboard_s;
    private readonly InputAction m_Keyboard_d;
    private readonly InputAction m_Keyboard_mouseVelocity;
    private readonly InputAction m_Keyboard_mousePosition;
    private readonly InputAction m_Keyboard_handScrolling;
    /// <summary>
    /// Provides access to input actions defined in input action map "Keyboard".
    /// </summary>
    public struct KeyboardActions
    {
        private @InputActions_viva m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public KeyboardActions(@InputActions_viva wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Keyboard/miniprofiler".
        /// </summary>
        public InputAction @miniprofiler => m_Wrapper.m_Keyboard_miniprofiler;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard/movement".
        /// </summary>
        public InputAction @movement => m_Wrapper.m_Keyboard_movement;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard/extendRight".
        /// </summary>
        public InputAction @extendRight => m_Wrapper.m_Keyboard_extendRight;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard/extendLeft".
        /// </summary>
        public InputAction @extendLeft => m_Wrapper.m_Keyboard_extendLeft;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard/wave".
        /// </summary>
        public InputAction @wave => m_Wrapper.m_Keyboard_wave;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard/follow".
        /// </summary>
        public InputAction @follow => m_Wrapper.m_Keyboard_follow;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard/stop".
        /// </summary>
        public InputAction @stop => m_Wrapper.m_Keyboard_stop;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard/pauseButton".
        /// </summary>
        public InputAction @pauseButton => m_Wrapper.m_Keyboard_pauseButton;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard/keyboardAlt".
        /// </summary>
        public InputAction @keyboardAlt => m_Wrapper.m_Keyboard_keyboardAlt;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard/rightInteract".
        /// </summary>
        public InputAction @rightInteract => m_Wrapper.m_Keyboard_rightInteract;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard/leftInteract".
        /// </summary>
        public InputAction @leftInteract => m_Wrapper.m_Keyboard_leftInteract;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard/crouch".
        /// </summary>
        public InputAction @crouch => m_Wrapper.m_Keyboard_crouch;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard/w".
        /// </summary>
        public InputAction @w => m_Wrapper.m_Keyboard_w;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard/a".
        /// </summary>
        public InputAction @a => m_Wrapper.m_Keyboard_a;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard/s".
        /// </summary>
        public InputAction @s => m_Wrapper.m_Keyboard_s;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard/d".
        /// </summary>
        public InputAction @d => m_Wrapper.m_Keyboard_d;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard/mouseVelocity".
        /// </summary>
        public InputAction @mouseVelocity => m_Wrapper.m_Keyboard_mouseVelocity;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard/mousePosition".
        /// </summary>
        public InputAction @mousePosition => m_Wrapper.m_Keyboard_mousePosition;
        /// <summary>
        /// Provides access to the underlying input action "Keyboard/handScrolling".
        /// </summary>
        public InputAction @handScrolling => m_Wrapper.m_Keyboard_handScrolling;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="KeyboardActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="KeyboardActions" />
        public void AddCallbacks(IKeyboardActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyboardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Add(instance);
            @miniprofiler.started += instance.OnMiniprofiler;
            @miniprofiler.performed += instance.OnMiniprofiler;
            @miniprofiler.canceled += instance.OnMiniprofiler;
            @movement.started += instance.OnMovement;
            @movement.performed += instance.OnMovement;
            @movement.canceled += instance.OnMovement;
            @extendRight.started += instance.OnExtendRight;
            @extendRight.performed += instance.OnExtendRight;
            @extendRight.canceled += instance.OnExtendRight;
            @extendLeft.started += instance.OnExtendLeft;
            @extendLeft.performed += instance.OnExtendLeft;
            @extendLeft.canceled += instance.OnExtendLeft;
            @wave.started += instance.OnWave;
            @wave.performed += instance.OnWave;
            @wave.canceled += instance.OnWave;
            @follow.started += instance.OnFollow;
            @follow.performed += instance.OnFollow;
            @follow.canceled += instance.OnFollow;
            @stop.started += instance.OnStop;
            @stop.performed += instance.OnStop;
            @stop.canceled += instance.OnStop;
            @pauseButton.started += instance.OnPauseButton;
            @pauseButton.performed += instance.OnPauseButton;
            @pauseButton.canceled += instance.OnPauseButton;
            @keyboardAlt.started += instance.OnKeyboardAlt;
            @keyboardAlt.performed += instance.OnKeyboardAlt;
            @keyboardAlt.canceled += instance.OnKeyboardAlt;
            @rightInteract.started += instance.OnRightInteract;
            @rightInteract.performed += instance.OnRightInteract;
            @rightInteract.canceled += instance.OnRightInteract;
            @leftInteract.started += instance.OnLeftInteract;
            @leftInteract.performed += instance.OnLeftInteract;
            @leftInteract.canceled += instance.OnLeftInteract;
            @crouch.started += instance.OnCrouch;
            @crouch.performed += instance.OnCrouch;
            @crouch.canceled += instance.OnCrouch;
            @w.started += instance.OnW;
            @w.performed += instance.OnW;
            @w.canceled += instance.OnW;
            @a.started += instance.OnA;
            @a.performed += instance.OnA;
            @a.canceled += instance.OnA;
            @s.started += instance.OnS;
            @s.performed += instance.OnS;
            @s.canceled += instance.OnS;
            @d.started += instance.OnD;
            @d.performed += instance.OnD;
            @d.canceled += instance.OnD;
            @mouseVelocity.started += instance.OnMouseVelocity;
            @mouseVelocity.performed += instance.OnMouseVelocity;
            @mouseVelocity.canceled += instance.OnMouseVelocity;
            @mousePosition.started += instance.OnMousePosition;
            @mousePosition.performed += instance.OnMousePosition;
            @mousePosition.canceled += instance.OnMousePosition;
            @handScrolling.started += instance.OnHandScrolling;
            @handScrolling.performed += instance.OnHandScrolling;
            @handScrolling.canceled += instance.OnHandScrolling;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="KeyboardActions" />
        private void UnregisterCallbacks(IKeyboardActions instance)
        {
            @miniprofiler.started -= instance.OnMiniprofiler;
            @miniprofiler.performed -= instance.OnMiniprofiler;
            @miniprofiler.canceled -= instance.OnMiniprofiler;
            @movement.started -= instance.OnMovement;
            @movement.performed -= instance.OnMovement;
            @movement.canceled -= instance.OnMovement;
            @extendRight.started -= instance.OnExtendRight;
            @extendRight.performed -= instance.OnExtendRight;
            @extendRight.canceled -= instance.OnExtendRight;
            @extendLeft.started -= instance.OnExtendLeft;
            @extendLeft.performed -= instance.OnExtendLeft;
            @extendLeft.canceled -= instance.OnExtendLeft;
            @wave.started -= instance.OnWave;
            @wave.performed -= instance.OnWave;
            @wave.canceled -= instance.OnWave;
            @follow.started -= instance.OnFollow;
            @follow.performed -= instance.OnFollow;
            @follow.canceled -= instance.OnFollow;
            @stop.started -= instance.OnStop;
            @stop.performed -= instance.OnStop;
            @stop.canceled -= instance.OnStop;
            @pauseButton.started -= instance.OnPauseButton;
            @pauseButton.performed -= instance.OnPauseButton;
            @pauseButton.canceled -= instance.OnPauseButton;
            @keyboardAlt.started -= instance.OnKeyboardAlt;
            @keyboardAlt.performed -= instance.OnKeyboardAlt;
            @keyboardAlt.canceled -= instance.OnKeyboardAlt;
            @rightInteract.started -= instance.OnRightInteract;
            @rightInteract.performed -= instance.OnRightInteract;
            @rightInteract.canceled -= instance.OnRightInteract;
            @leftInteract.started -= instance.OnLeftInteract;
            @leftInteract.performed -= instance.OnLeftInteract;
            @leftInteract.canceled -= instance.OnLeftInteract;
            @crouch.started -= instance.OnCrouch;
            @crouch.performed -= instance.OnCrouch;
            @crouch.canceled -= instance.OnCrouch;
            @w.started -= instance.OnW;
            @w.performed -= instance.OnW;
            @w.canceled -= instance.OnW;
            @a.started -= instance.OnA;
            @a.performed -= instance.OnA;
            @a.canceled -= instance.OnA;
            @s.started -= instance.OnS;
            @s.performed -= instance.OnS;
            @s.canceled -= instance.OnS;
            @d.started -= instance.OnD;
            @d.performed -= instance.OnD;
            @d.canceled -= instance.OnD;
            @mouseVelocity.started -= instance.OnMouseVelocity;
            @mouseVelocity.performed -= instance.OnMouseVelocity;
            @mouseVelocity.canceled -= instance.OnMouseVelocity;
            @mousePosition.started -= instance.OnMousePosition;
            @mousePosition.performed -= instance.OnMousePosition;
            @mousePosition.canceled -= instance.OnMousePosition;
            @handScrolling.started -= instance.OnHandScrolling;
            @handScrolling.performed -= instance.OnHandScrolling;
            @handScrolling.canceled -= instance.OnHandScrolling;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="KeyboardActions.UnregisterCallbacks(IKeyboardActions)" />.
        /// </summary>
        /// <seealso cref="KeyboardActions.UnregisterCallbacks(IKeyboardActions)" />
        public void RemoveCallbacks(IKeyboardActions instance)
        {
            if (m_Wrapper.m_KeyboardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="KeyboardActions.AddCallbacks(IKeyboardActions)" />
        /// <seealso cref="KeyboardActions.RemoveCallbacks(IKeyboardActions)" />
        /// <seealso cref="KeyboardActions.UnregisterCallbacks(IKeyboardActions)" />
        public void SetCallbacks(IKeyboardActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyboardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="KeyboardActions" /> instance referencing this action map.
    /// </summary>
    public KeyboardActions @Keyboard => new KeyboardActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_mousePosition;
    private readonly InputAction m_UI_leftClick;
    private readonly InputAction m_UI_rightClick;
    private readonly InputAction m_UI_middleClick;
    private readonly InputAction m_UI_scroll;
    private readonly InputAction m_UI_cancel;
    private readonly InputAction m_UI_submit;
    private readonly InputAction m_UI_move;
    private readonly InputAction m_UI_trackedPosition;
    private readonly InputAction m_UI_trackedOrientation;
    /// <summary>
    /// Provides access to input actions defined in input action map "UI".
    /// </summary>
    public struct UIActions
    {
        private @InputActions_viva m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public UIActions(@InputActions_viva wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "UI/mousePosition".
        /// </summary>
        public InputAction @mousePosition => m_Wrapper.m_UI_mousePosition;
        /// <summary>
        /// Provides access to the underlying input action "UI/leftClick".
        /// </summary>
        public InputAction @leftClick => m_Wrapper.m_UI_leftClick;
        /// <summary>
        /// Provides access to the underlying input action "UI/rightClick".
        /// </summary>
        public InputAction @rightClick => m_Wrapper.m_UI_rightClick;
        /// <summary>
        /// Provides access to the underlying input action "UI/middleClick".
        /// </summary>
        public InputAction @middleClick => m_Wrapper.m_UI_middleClick;
        /// <summary>
        /// Provides access to the underlying input action "UI/scroll".
        /// </summary>
        public InputAction @scroll => m_Wrapper.m_UI_scroll;
        /// <summary>
        /// Provides access to the underlying input action "UI/cancel".
        /// </summary>
        public InputAction @cancel => m_Wrapper.m_UI_cancel;
        /// <summary>
        /// Provides access to the underlying input action "UI/submit".
        /// </summary>
        public InputAction @submit => m_Wrapper.m_UI_submit;
        /// <summary>
        /// Provides access to the underlying input action "UI/move".
        /// </summary>
        public InputAction @move => m_Wrapper.m_UI_move;
        /// <summary>
        /// Provides access to the underlying input action "UI/trackedPosition".
        /// </summary>
        public InputAction @trackedPosition => m_Wrapper.m_UI_trackedPosition;
        /// <summary>
        /// Provides access to the underlying input action "UI/trackedOrientation".
        /// </summary>
        public InputAction @trackedOrientation => m_Wrapper.m_UI_trackedOrientation;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="UIActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="UIActions" />
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @mousePosition.started += instance.OnMousePosition;
            @mousePosition.performed += instance.OnMousePosition;
            @mousePosition.canceled += instance.OnMousePosition;
            @leftClick.started += instance.OnLeftClick;
            @leftClick.performed += instance.OnLeftClick;
            @leftClick.canceled += instance.OnLeftClick;
            @rightClick.started += instance.OnRightClick;
            @rightClick.performed += instance.OnRightClick;
            @rightClick.canceled += instance.OnRightClick;
            @middleClick.started += instance.OnMiddleClick;
            @middleClick.performed += instance.OnMiddleClick;
            @middleClick.canceled += instance.OnMiddleClick;
            @scroll.started += instance.OnScroll;
            @scroll.performed += instance.OnScroll;
            @scroll.canceled += instance.OnScroll;
            @cancel.started += instance.OnCancel;
            @cancel.performed += instance.OnCancel;
            @cancel.canceled += instance.OnCancel;
            @submit.started += instance.OnSubmit;
            @submit.performed += instance.OnSubmit;
            @submit.canceled += instance.OnSubmit;
            @move.started += instance.OnMove;
            @move.performed += instance.OnMove;
            @move.canceled += instance.OnMove;
            @trackedPosition.started += instance.OnTrackedPosition;
            @trackedPosition.performed += instance.OnTrackedPosition;
            @trackedPosition.canceled += instance.OnTrackedPosition;
            @trackedOrientation.started += instance.OnTrackedOrientation;
            @trackedOrientation.performed += instance.OnTrackedOrientation;
            @trackedOrientation.canceled += instance.OnTrackedOrientation;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="UIActions" />
        private void UnregisterCallbacks(IUIActions instance)
        {
            @mousePosition.started -= instance.OnMousePosition;
            @mousePosition.performed -= instance.OnMousePosition;
            @mousePosition.canceled -= instance.OnMousePosition;
            @leftClick.started -= instance.OnLeftClick;
            @leftClick.performed -= instance.OnLeftClick;
            @leftClick.canceled -= instance.OnLeftClick;
            @rightClick.started -= instance.OnRightClick;
            @rightClick.performed -= instance.OnRightClick;
            @rightClick.canceled -= instance.OnRightClick;
            @middleClick.started -= instance.OnMiddleClick;
            @middleClick.performed -= instance.OnMiddleClick;
            @middleClick.canceled -= instance.OnMiddleClick;
            @scroll.started -= instance.OnScroll;
            @scroll.performed -= instance.OnScroll;
            @scroll.canceled -= instance.OnScroll;
            @cancel.started -= instance.OnCancel;
            @cancel.performed -= instance.OnCancel;
            @cancel.canceled -= instance.OnCancel;
            @submit.started -= instance.OnSubmit;
            @submit.performed -= instance.OnSubmit;
            @submit.canceled -= instance.OnSubmit;
            @move.started -= instance.OnMove;
            @move.performed -= instance.OnMove;
            @move.canceled -= instance.OnMove;
            @trackedPosition.started -= instance.OnTrackedPosition;
            @trackedPosition.performed -= instance.OnTrackedPosition;
            @trackedPosition.canceled -= instance.OnTrackedPosition;
            @trackedOrientation.started -= instance.OnTrackedOrientation;
            @trackedOrientation.performed -= instance.OnTrackedOrientation;
            @trackedOrientation.canceled -= instance.OnTrackedOrientation;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="UIActions.UnregisterCallbacks(IUIActions)" />.
        /// </summary>
        /// <seealso cref="UIActions.UnregisterCallbacks(IUIActions)" />
        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="UIActions.AddCallbacks(IUIActions)" />
        /// <seealso cref="UIActions.RemoveCallbacks(IUIActions)" />
        /// <seealso cref="UIActions.UnregisterCallbacks(IUIActions)" />
        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="UIActions" /> instance referencing this action map.
    /// </summary>
    public UIActions @UI => new UIActions(this);

    // VR Head
    private readonly InputActionMap m_VRHead;
    private List<IVRHeadActions> m_VRHeadActionsCallbackInterfaces = new List<IVRHeadActions>();
    private readonly InputAction m_VRHead_Position;
    private readonly InputAction m_VRHead_Rotation;
    /// <summary>
    /// Provides access to input actions defined in input action map "VR Head".
    /// </summary>
    public struct VRHeadActions
    {
        private @InputActions_viva m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public VRHeadActions(@InputActions_viva wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "VRHead/Position".
        /// </summary>
        public InputAction @Position => m_Wrapper.m_VRHead_Position;
        /// <summary>
        /// Provides access to the underlying input action "VRHead/Rotation".
        /// </summary>
        public InputAction @Rotation => m_Wrapper.m_VRHead_Rotation;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_VRHead; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="VRHeadActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(VRHeadActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="VRHeadActions" />
        public void AddCallbacks(IVRHeadActions instance)
        {
            if (instance == null || m_Wrapper.m_VRHeadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VRHeadActionsCallbackInterfaces.Add(instance);
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="VRHeadActions" />
        private void UnregisterCallbacks(IVRHeadActions instance)
        {
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="VRHeadActions.UnregisterCallbacks(IVRHeadActions)" />.
        /// </summary>
        /// <seealso cref="VRHeadActions.UnregisterCallbacks(IVRHeadActions)" />
        public void RemoveCallbacks(IVRHeadActions instance)
        {
            if (m_Wrapper.m_VRHeadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="VRHeadActions.AddCallbacks(IVRHeadActions)" />
        /// <seealso cref="VRHeadActions.RemoveCallbacks(IVRHeadActions)" />
        /// <seealso cref="VRHeadActions.UnregisterCallbacks(IVRHeadActions)" />
        public void SetCallbacks(IVRHeadActions instance)
        {
            foreach (var item in m_Wrapper.m_VRHeadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VRHeadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="VRHeadActions" /> instance referencing this action map.
    /// </summary>
    public VRHeadActions @VRHead => new VRHeadActions(this);

    // VR LeftHand
    private readonly InputActionMap m_VRLeftHand;
    private List<IVRLeftHandActions> m_VRLeftHandActionsCallbackInterfaces = new List<IVRLeftHandActions>();
    private readonly InputAction m_VRLeftHand_Position;
    private readonly InputAction m_VRLeftHand_Rotation;
    private readonly InputAction m_VRLeftHand_TrackingState;
    private readonly InputAction m_VRLeftHand_HapticDevice;
    private readonly InputAction m_VRLeftHand_Move;
    private readonly InputAction m_VRLeftHand_Select;
    private readonly InputAction m_VRLeftHand_Grab;
    private readonly InputAction m_VRLeftHand_Interact;
    private readonly InputAction m_VRLeftHand_Pause;
    private readonly InputAction m_VRLeftHand_Run;
    /// <summary>
    /// Provides access to input actions defined in input action map "VR LeftHand".
    /// </summary>
    public struct VRLeftHandActions
    {
        private @InputActions_viva m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public VRLeftHandActions(@InputActions_viva wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "VRLeftHand/Position".
        /// </summary>
        public InputAction @Position => m_Wrapper.m_VRLeftHand_Position;
        /// <summary>
        /// Provides access to the underlying input action "VRLeftHand/Rotation".
        /// </summary>
        public InputAction @Rotation => m_Wrapper.m_VRLeftHand_Rotation;
        /// <summary>
        /// Provides access to the underlying input action "VRLeftHand/TrackingState".
        /// </summary>
        public InputAction @TrackingState => m_Wrapper.m_VRLeftHand_TrackingState;
        /// <summary>
        /// Provides access to the underlying input action "VRLeftHand/HapticDevice".
        /// </summary>
        public InputAction @HapticDevice => m_Wrapper.m_VRLeftHand_HapticDevice;
        /// <summary>
        /// Provides access to the underlying input action "VRLeftHand/Move".
        /// </summary>
        public InputAction @Move => m_Wrapper.m_VRLeftHand_Move;
        /// <summary>
        /// Provides access to the underlying input action "VRLeftHand/Select".
        /// </summary>
        public InputAction @Select => m_Wrapper.m_VRLeftHand_Select;
        /// <summary>
        /// Provides access to the underlying input action "VRLeftHand/Grab".
        /// </summary>
        public InputAction @Grab => m_Wrapper.m_VRLeftHand_Grab;
        /// <summary>
        /// Provides access to the underlying input action "VRLeftHand/Interact".
        /// </summary>
        public InputAction @Interact => m_Wrapper.m_VRLeftHand_Interact;
        /// <summary>
        /// Provides access to the underlying input action "VRLeftHand/Pause".
        /// </summary>
        public InputAction @Pause => m_Wrapper.m_VRLeftHand_Pause;
        /// <summary>
        /// Provides access to the underlying input action "VRLeftHand/Run".
        /// </summary>
        public InputAction @Run => m_Wrapper.m_VRLeftHand_Run;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_VRLeftHand; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="VRLeftHandActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(VRLeftHandActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="VRLeftHandActions" />
        public void AddCallbacks(IVRLeftHandActions instance)
        {
            if (instance == null || m_Wrapper.m_VRLeftHandActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VRLeftHandActionsCallbackInterfaces.Add(instance);
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @TrackingState.started += instance.OnTrackingState;
            @TrackingState.performed += instance.OnTrackingState;
            @TrackingState.canceled += instance.OnTrackingState;
            @HapticDevice.started += instance.OnHapticDevice;
            @HapticDevice.performed += instance.OnHapticDevice;
            @HapticDevice.canceled += instance.OnHapticDevice;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @Grab.started += instance.OnGrab;
            @Grab.performed += instance.OnGrab;
            @Grab.canceled += instance.OnGrab;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="VRLeftHandActions" />
        private void UnregisterCallbacks(IVRLeftHandActions instance)
        {
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @TrackingState.started -= instance.OnTrackingState;
            @TrackingState.performed -= instance.OnTrackingState;
            @TrackingState.canceled -= instance.OnTrackingState;
            @HapticDevice.started -= instance.OnHapticDevice;
            @HapticDevice.performed -= instance.OnHapticDevice;
            @HapticDevice.canceled -= instance.OnHapticDevice;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @Grab.started -= instance.OnGrab;
            @Grab.performed -= instance.OnGrab;
            @Grab.canceled -= instance.OnGrab;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="VRLeftHandActions.UnregisterCallbacks(IVRLeftHandActions)" />.
        /// </summary>
        /// <seealso cref="VRLeftHandActions.UnregisterCallbacks(IVRLeftHandActions)" />
        public void RemoveCallbacks(IVRLeftHandActions instance)
        {
            if (m_Wrapper.m_VRLeftHandActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="VRLeftHandActions.AddCallbacks(IVRLeftHandActions)" />
        /// <seealso cref="VRLeftHandActions.RemoveCallbacks(IVRLeftHandActions)" />
        /// <seealso cref="VRLeftHandActions.UnregisterCallbacks(IVRLeftHandActions)" />
        public void SetCallbacks(IVRLeftHandActions instance)
        {
            foreach (var item in m_Wrapper.m_VRLeftHandActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VRLeftHandActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="VRLeftHandActions" /> instance referencing this action map.
    /// </summary>
    public VRLeftHandActions @VRLeftHand => new VRLeftHandActions(this);

    // VR RightHand
    private readonly InputActionMap m_VRRightHand;
    private List<IVRRightHandActions> m_VRRightHandActionsCallbackInterfaces = new List<IVRRightHandActions>();
    private readonly InputAction m_VRRightHand_Position;
    private readonly InputAction m_VRRightHand_Rotation;
    private readonly InputAction m_VRRightHand_TrackingState;
    private readonly InputAction m_VRRightHand_HapticDevice;
    private readonly InputAction m_VRRightHand_Move;
    private readonly InputAction m_VRRightHand_Select;
    private readonly InputAction m_VRRightHand_Grab;
    private readonly InputAction m_VRRightHand_Interact;
    private readonly InputAction m_VRRightHand_Pause;
    private readonly InputAction m_VRRightHand_Run;
    /// <summary>
    /// Provides access to input actions defined in input action map "VR RightHand".
    /// </summary>
    public struct VRRightHandActions
    {
        private @InputActions_viva m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public VRRightHandActions(@InputActions_viva wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "VRRightHand/Position".
        /// </summary>
        public InputAction @Position => m_Wrapper.m_VRRightHand_Position;
        /// <summary>
        /// Provides access to the underlying input action "VRRightHand/Rotation".
        /// </summary>
        public InputAction @Rotation => m_Wrapper.m_VRRightHand_Rotation;
        /// <summary>
        /// Provides access to the underlying input action "VRRightHand/TrackingState".
        /// </summary>
        public InputAction @TrackingState => m_Wrapper.m_VRRightHand_TrackingState;
        /// <summary>
        /// Provides access to the underlying input action "VRRightHand/HapticDevice".
        /// </summary>
        public InputAction @HapticDevice => m_Wrapper.m_VRRightHand_HapticDevice;
        /// <summary>
        /// Provides access to the underlying input action "VRRightHand/Move".
        /// </summary>
        public InputAction @Move => m_Wrapper.m_VRRightHand_Move;
        /// <summary>
        /// Provides access to the underlying input action "VRRightHand/Select".
        /// </summary>
        public InputAction @Select => m_Wrapper.m_VRRightHand_Select;
        /// <summary>
        /// Provides access to the underlying input action "VRRightHand/Grab".
        /// </summary>
        public InputAction @Grab => m_Wrapper.m_VRRightHand_Grab;
        /// <summary>
        /// Provides access to the underlying input action "VRRightHand/Interact".
        /// </summary>
        public InputAction @Interact => m_Wrapper.m_VRRightHand_Interact;
        /// <summary>
        /// Provides access to the underlying input action "VRRightHand/Pause".
        /// </summary>
        public InputAction @Pause => m_Wrapper.m_VRRightHand_Pause;
        /// <summary>
        /// Provides access to the underlying input action "VRRightHand/Run".
        /// </summary>
        public InputAction @Run => m_Wrapper.m_VRRightHand_Run;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_VRRightHand; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="VRRightHandActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(VRRightHandActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="VRRightHandActions" />
        public void AddCallbacks(IVRRightHandActions instance)
        {
            if (instance == null || m_Wrapper.m_VRRightHandActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VRRightHandActionsCallbackInterfaces.Add(instance);
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @TrackingState.started += instance.OnTrackingState;
            @TrackingState.performed += instance.OnTrackingState;
            @TrackingState.canceled += instance.OnTrackingState;
            @HapticDevice.started += instance.OnHapticDevice;
            @HapticDevice.performed += instance.OnHapticDevice;
            @HapticDevice.canceled += instance.OnHapticDevice;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Select.started += instance.OnSelect;
            @Select.performed += instance.OnSelect;
            @Select.canceled += instance.OnSelect;
            @Grab.started += instance.OnGrab;
            @Grab.performed += instance.OnGrab;
            @Grab.canceled += instance.OnGrab;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="VRRightHandActions" />
        private void UnregisterCallbacks(IVRRightHandActions instance)
        {
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @TrackingState.started -= instance.OnTrackingState;
            @TrackingState.performed -= instance.OnTrackingState;
            @TrackingState.canceled -= instance.OnTrackingState;
            @HapticDevice.started -= instance.OnHapticDevice;
            @HapticDevice.performed -= instance.OnHapticDevice;
            @HapticDevice.canceled -= instance.OnHapticDevice;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Select.started -= instance.OnSelect;
            @Select.performed -= instance.OnSelect;
            @Select.canceled -= instance.OnSelect;
            @Grab.started -= instance.OnGrab;
            @Grab.performed -= instance.OnGrab;
            @Grab.canceled -= instance.OnGrab;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="VRRightHandActions.UnregisterCallbacks(IVRRightHandActions)" />.
        /// </summary>
        /// <seealso cref="VRRightHandActions.UnregisterCallbacks(IVRRightHandActions)" />
        public void RemoveCallbacks(IVRRightHandActions instance)
        {
            if (m_Wrapper.m_VRRightHandActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="VRRightHandActions.AddCallbacks(IVRRightHandActions)" />
        /// <seealso cref="VRRightHandActions.RemoveCallbacks(IVRRightHandActions)" />
        /// <seealso cref="VRRightHandActions.UnregisterCallbacks(IVRRightHandActions)" />
        public void SetCallbacks(IVRRightHandActions instance)
        {
            foreach (var item in m_Wrapper.m_VRRightHandActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VRRightHandActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="VRRightHandActions" /> instance referencing this action map.
    /// </summary>
    public VRRightHandActions @VRRightHand => new VRRightHandActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Keyboard" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="KeyboardActions.AddCallbacks(IKeyboardActions)" />
    /// <seealso cref="KeyboardActions.RemoveCallbacks(IKeyboardActions)" />
    public interface IKeyboardActions
    {
        /// <summary>
        /// Method invoked when associated input action "miniprofiler" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMiniprofiler(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "movement" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMovement(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "extendRight" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnExtendRight(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "extendLeft" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnExtendLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "wave" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnWave(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "follow" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnFollow(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "stop" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnStop(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "pauseButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPauseButton(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "keyboardAlt" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnKeyboardAlt(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "rightInteract" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightInteract(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "leftInteract" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftInteract(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "crouch" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCrouch(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "w" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnW(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "a" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnA(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "s" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnS(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "d" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnD(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "mouseVelocity" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMouseVelocity(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "mousePosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMousePosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "handScrolling" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHandScrolling(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "UI" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="UIActions.AddCallbacks(IUIActions)" />
    /// <seealso cref="UIActions.RemoveCallbacks(IUIActions)" />
    public interface IUIActions
    {
        /// <summary>
        /// Method invoked when associated input action "mousePosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMousePosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "leftClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "rightClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "middleClick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMiddleClick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "scroll" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnScroll(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "cancel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCancel(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "submit" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSubmit(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "trackedPosition" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTrackedPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "trackedOrientation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTrackedOrientation(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "VR Head" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="VRHeadActions.AddCallbacks(IVRHeadActions)" />
    /// <seealso cref="VRHeadActions.RemoveCallbacks(IVRHeadActions)" />
    public interface IVRHeadActions
    {
        /// <summary>
        /// Method invoked when associated input action "Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotation(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "VR LeftHand" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="VRLeftHandActions.AddCallbacks(IVRLeftHandActions)" />
    /// <seealso cref="VRLeftHandActions.RemoveCallbacks(IVRLeftHandActions)" />
    public interface IVRLeftHandActions
    {
        /// <summary>
        /// Method invoked when associated input action "Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Tracking State" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTrackingState(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Haptic Device" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHapticDevice(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Select" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelect(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Grab" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGrab(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Interact" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnInteract(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Pause" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPause(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Run" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRun(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "VR RightHand" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="VRRightHandActions.AddCallbacks(IVRRightHandActions)" />
    /// <seealso cref="VRRightHandActions.RemoveCallbacks(IVRRightHandActions)" />
    public interface IVRRightHandActions
    {
        /// <summary>
        /// Method invoked when associated input action "Position" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPosition(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Rotation" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRotation(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Tracking State" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTrackingState(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Haptic Device" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnHapticDevice(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMove(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Select" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelect(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Grab" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGrab(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Interact" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnInteract(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Pause" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPause(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Run" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRun(InputAction.CallbackContext context);
    }
}
